generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  title String @unique
  users User[] @relation("UserRole")
}

model User {
  id           Int        @id @default(autoincrement())
  passwordhash String     
  login        String     @unique
  date         DateTime   @default(now())
  roleid       Int        @db.SmallInt 
  role         Role       @relation("UserRole", fields: [roleid], references: [id])
  teachers     Teacher?   @relation("TeacherUser")
  students     Students[] @relation("StudentUser")
}

model Teacher {
  id             Int              @id @default(autoincrement())
  name           String
  lastname       String
  patronymic     String
  userid         Int              @unique
  users          User             @relation("TeacherUser", fields: [userid], references: [id])

  teacherGroups  TeacherGroups[]  // <-- ВАЖНО: добавлено для связи с TeacherGroups
  testTasks      TestTasks[]      // <-- если ещё есть связь с тестами
}

model Groups {
  id             Int              @id @default(autoincrement())
  title          String           @db.VarChar(50) // было 6
  course         Int              @db.SmallInt

  students       Students[]       @relation("StudentGroup")       // связь с учениками
  teacherGroups  TeacherGroups[]                                  // связь с преподавателями
  testTasks      TestTasks[]                                      // если есть связь с тестами напрямую
}


model Students {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(25)
  lastname   String   @db.VarChar(40)
  patronymic String   @db.VarChar(40)
  userId     Int      @unique
  groupId    Int

  users      User     @relation("StudentUser", fields: [userId], references: [id]) // <-- вот это ключевое
  group      Groups   @relation("StudentGroup", fields: [groupId], references: [id])
  grades     Grades[] @relation("StudentsGrades")
}


model TeacherGroups {
  id        Int     @id @default(autoincrement())
  teacherId Int
  groupId   Int

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  group     Groups  @relation(fields: [groupId], references: [id])
}




model TestTasks {
  id             Int         @id @default(autoincrement())
  title          String      @db.VarChar(60)
  groupid        Int
  description    String      @db.VarChar(255)
  img            String?      @db.VarChar(100)
  beginningdate  DateTime
  enddatetime    DateTime
  time           Int
  teacherid      Int

  groups         Groups      @relation(fields: [groupid], references: [id])
  teacher        Teacher     @relation(fields: [teacherid], references: [id])
  questions      Questions[] @relation("testTasksQuestions") // <-- ВАЖНО
}

model Questions {
  id          Int       @id @default(autoincrement())
  description String    @db.VarChar(254)
  img         String?    @db.VarChar(100)
  testtaskid  Int       @db.SmallInt
  answers     Answers[] @relation("questionsAnswers")
  testtasks   TestTasks @relation("testTasksQuestions", fields: [testtaskid], references: [id])
}

model Answers {
  id         Int      @id @default(autoincrement())
  questionid Int      @db.SmallInt 
  text       String   @db.VarChar(255)
  iscorrect  Boolean? 

  question Questions @relation("questionsAnswers", fields: [questionid], references: [id]) // Изменено с questionId
}
model Grades {
  id        Int      @id @default(autoincrement())
  studentid Int      @db.SmallInt 
  grade     Int      @db.SmallInt
  date      DateTime

  students Students @relation("StudentsGrades", fields: [studentid], references: [id]) 
}